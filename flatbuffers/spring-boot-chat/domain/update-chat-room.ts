// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PacketType } from '../../spring-boot-chat/domain/packet-type';
import { RoomId, RoomIdT } from '../../spring-boot-chat/domain/room-id';


export class UpdateChatRoom implements flatbuffers.IUnpackableObject<UpdateChatRoomT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateChatRoom {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateChatRoom(bb:flatbuffers.ByteBuffer, obj?:UpdateChatRoom):UpdateChatRoom {
  return (obj || new UpdateChatRoom()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateChatRoom(bb:flatbuffers.ByteBuffer, obj?:UpdateChatRoom):UpdateChatRoom {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateChatRoom()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():PacketType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PacketType.NONE;
}

roomIds(index: number, obj?:RoomId):RoomId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new RoomId()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

roomIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

roomNames(index: number):string
roomNames(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
roomNames(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

roomNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static getFullyQualifiedName():string {
  return 'springBootChat.domain.UpdateChatRoom';
}

static startUpdateChatRoom(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:PacketType) {
  builder.addFieldInt8(0, type, PacketType.NONE);
}

static addRoomIds(builder:flatbuffers.Builder, roomIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, roomIdsOffset, 0);
}

static createRoomIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoomIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRoomNames(builder:flatbuffers.Builder, roomNamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, roomNamesOffset, 0);
}

static createRoomNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoomNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUpdateChatRoom(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishUpdateChatRoomBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedUpdateChatRoomBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createUpdateChatRoom(builder:flatbuffers.Builder, type:PacketType, roomIdsOffset:flatbuffers.Offset, roomNamesOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdateChatRoom.startUpdateChatRoom(builder);
  UpdateChatRoom.addType(builder, type);
  UpdateChatRoom.addRoomIds(builder, roomIdsOffset);
  UpdateChatRoom.addRoomNames(builder, roomNamesOffset);
  return UpdateChatRoom.endUpdateChatRoom(builder);
}

unpack(): UpdateChatRoomT {
  return new UpdateChatRoomT(
    this.type(),
    this.bb!.createObjList<RoomId, RoomIdT>(this.roomIds.bind(this), this.roomIdsLength()),
    this.bb!.createScalarList<string>(this.roomNames.bind(this), this.roomNamesLength())
  );
}


unpackTo(_o: UpdateChatRoomT): void {
  _o.type = this.type();
  _o.roomIds = this.bb!.createObjList<RoomId, RoomIdT>(this.roomIds.bind(this), this.roomIdsLength());
  _o.roomNames = this.bb!.createScalarList<string>(this.roomNames.bind(this), this.roomNamesLength());
}
}

export class UpdateChatRoomT implements flatbuffers.IGeneratedObject {
constructor(
  public type: PacketType = PacketType.NONE,
  public roomIds: (RoomIdT)[] = [],
  public roomNames: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const roomIds = UpdateChatRoom.createRoomIdsVector(builder, builder.createObjectOffsetList(this.roomIds));
  const roomNames = UpdateChatRoom.createRoomNamesVector(builder, builder.createObjectOffsetList(this.roomNames));

  return UpdateChatRoom.createUpdateChatRoom(builder,
    this.type,
    roomIds,
    roomNames
  );
}
}
